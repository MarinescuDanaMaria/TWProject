import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import ParticipantsTable from "./ParticipantsTable";

const EventDetails = () => {
  const { idGroup, idEvent } = useParams();
  const [event, setEvent] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchEventDetails = async () => {
      try {
        const response = await fetch(
          `http://localhost:8081/organizer/group/${idGroup}/event/${idEvent}`,
          {
            headers: {
              Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
          }
        );

        if (!response.ok) {
          throw new Error("Failed to fetch event details");
        }

        const data = await response.json();
        setEvent(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchEventDetails();
  }, [idGroup, idEvent]);

  const handleViewParticipants = async () => {
    try {
      const response = await fetch(
        `http://localhost:8081/organizer/event/${idEvent}/participants`,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        }
      );

      if (!response.ok) {
        throw new Error("Failed to fetch participants");
      }

      const data = await response.json();
      console.log("Participants:", data);
      alert("Check console for participants list.");
    } catch (error) {
      console.error("Error fetching participants:", error);
      alert("Failed to fetch participants.");
    }
  };
  const handleExportCSV = async () => {
    try {
      const response = await fetch(
        `http://localhost:8081/organizer/event/${idEvent}/participants/csv`,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        }
      );
  
      if (!response.ok) {
        throw new Error("Failed to export CSV");
      }
  
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.setAttribute("download", `participants_event_${idEvent}.csv`);
      document.body.appendChild(link);
      link.click();
      link.remove();
    } catch (error) {
      console.error("Error exporting CSV:", error);
      alert("Failed to export CSV.");
    }
  };
  
  const handleExportPDF = async () => {
    try {
      const response = await fetch(
        `http://localhost:8081/organizer/event/${idEvent}/participants/pdf`,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        }
      );
  
      if (!response.ok) {
        throw new Error("Failed to export PDF");
      }
  
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.setAttribute("download", `participants_event_${idEvent}.pdf`);
      document.body.appendChild(link);
      link.click();
      link.remove();
    } catch (error) {
      console.error("Error exporting PDF:", error);
      alert("Failed to export PDF.");
    }
  };

  
  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div>
      <h1>Name: {event.name}</h1>
      <p>Description: {event.description}</p>
      <p>Status: {event.status}</p>
      <p>Start: {new Date(event.startTime).toLocaleString()}</p>
      <p>End: {new Date(event.endTime).toLocaleString()}</p>
      <p>Auto-Generated Text: {event.autoGeneratedText}</p>
      {event.qrCodeImageUrl && (
        <img
          src={`http://localhost:8081${event.qrCodeImageUrl}`}
          alt="QR Code"
        />
      )}
      <div className="flex flex-col">
      <ParticipantsTable eventId={idEvent} />
      <button onClick={handleExportCSV}>Export CSV</button>
      <button onClick={handleExportPDF}>Export PDF</button>
      </div>
    </div>
  );
};

export default EventDetails;

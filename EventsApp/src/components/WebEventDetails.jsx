import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom"; // Importă `useNavigate`
import QrCodeScanner from "./customComponents/QrScanner"; // Importă componenta QrCodeScanner
import Swal from "sweetalert2";

function WebEventDetails() {
  const { id } = useParams(); // Preluăm id-ul din URL
  const [event, setEvent] = useState(null);
  const [isParticipant, setIsParticipant] = useState(false); // Declarație stare pentru participare
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate(); // Folosește `useNavigate` pentru redirecționare
  const isLoggedIn = localStorage.getItem("token"); // Verifică dacă utilizatorul este logat
  const [showScanner, setShowScanner] = useState(false);
  const [autoGeneratedText, setAutoGeneratedText] = useState("");
  const [qrCodeImageUrl, setQrCodeImageUrl] = useState("");

  useEffect(() => {
    const fetchEventDetails = async () => {
      try {
        const response = await fetch(`http://localhost:8081/event-web/${id}`); // Apelează API-ul pentru detalii
        if (!response.ok) {
          throw new Error("Failed to fetch event details.");
        }
        const eventData = await response.json();
        setEvent(eventData);

        setAutoGeneratedText(eventData.autoGeneratedText);
        if (eventData.qrCode && eventData.qrCode.image_url) {
          setQrCodeImageUrl(
            `http://localhost:8081${eventData.qrCode.image_url}`
          );
        }
        console.log(eventData);

        if (isLoggedIn) {
          // Verificăm dacă utilizatorul este deja participant
          const participantResponse = await fetch(
            `http://localhost:8081/user/is-participant/${id}`,
            {
              method: "GET",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${localStorage.getItem("token")}`,
              },
            }
          );
          const participantData = await participantResponse.json();
          if (participantResponse.ok) {
            setIsParticipant(participantData.isParticipant); // Setează starea
          }
        }
      } catch (error) {
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchEventDetails();
  }, [id, isLoggedIn]);
  const confirmParticipation = async (qrData) => {
    try {
      const response = await fetch(
        `http://localhost:8081/user/confirm-participation/${id}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
          body: JSON.stringify({ qrData }),
        }
      );
      const data = await response.json();

      if (response.ok) {
        alert(data.message);
      } else {
        alert(data.error || "Failed to confirm participation.");
      }
    } catch (error) {
      console.error("Error confirming participation:", error);
      alert("An error occurred while confirming participation.");
    }
  };

  const handleJoinEvent = async () => {
    if (!isLoggedIn) {
      // Dacă utilizatorul nu este logat, redirecționează-l la pagina de login
      navigate("/login");
      return;
    }

    try {
      const response = await fetch(
        `http://localhost:8081/user/join-event/${id}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${localStorage.getItem("token")}`, // Token-ul utilizatorului
          },
        }
      );
      const data = await response.json();

      if (response.ok) {
        alert(data.message);
        setIsParticipant(data.isParticipant); // Actualizează starea
        setShowScanner(true);
      } else {
        throw new Error(data.error || "Eroare la participarea la eveniment!");
      }
    } catch (error) {
      console.error(error);
      alert(error.message || "Eroare la participarea la eveniment.");
    }

    if (isParticipant) {
      // Dacă utilizatorul este deja participant, arată opțiunile de scanare sau introducere text
      Swal.fire({
        title: "Ești deja participant",
        text: "Cum dorești să confirmi participarea?",
        icon: "info",
        showCancelButton: true,
        confirmButtonText: "Scanare QR",
        cancelButtonText: "Introducere Text",
      }).then((result) => {
        if (result.isConfirmed) {
         // handleQRCodeOption(); // Afișează scannerul QR
         setShowScanner(true); 
        } else if (result.dismiss === Swal.DismissReason.cancel) {
          handleTextInputOption(); // Afișează opțiunea de introducere text
        }
      });
    } else {
      // Dacă nu este participant, arată QR-ul și textul pentru participare
      Swal.fire({
        title: "Participare",
        html: `
          <p>Scanează codul QR sau utilizează textul pentru confirmare:</p>
          <div style="text-align: center; margin-top: 20px;">
            <img src="${qrCodeImageUrl}" alt="QR Code" style="width: 200px; height: 200px;" />
            <p style="margin-top: 10px;">Text pentru confirmare: <b>${autoGeneratedText}</b></p>
          </div>
        `,
        icon: "success",
        confirmButtonText: "OK",
      });
    }
  };
  const handleScanSuccess = (decodedText) => {
    console.log("Cod QR detectat:", decodedText);
    // Validează codul QR cu URL-ul evenimentului curent
    const eventUrl = `http://localhost:8081/event/${id}`;
    if (decodedText === eventUrl) {
      // alert("Good Event");
      confirmParticipation(id);
    } else {
      alert("Bad Event");
    }
    setShowScanner(false); // Ascunde scannerul după scanare
  };

  const handleScanError = (errorMessage) => {
    if (!error.includes("NotFoundException")) {
      console.error(`Eroare la scanare: ${error}`);
    }
    setShowScanner(false);
  };

  const handleQRCodeOption = () => {
    Swal.fire({
      title: "Cod QR pentru participare",
      html: `<img src="${qrCodeImageUrl}" alt="QR Code" style="width: 200px; height: 200px;" />`,
      icon: "success",
    });
  };

  const handleTextOption = () => {
    Swal.fire({
      title: "Text pentru participare",
      text: autoGeneratedText,
      icon: "info",
    });
  };

  const handleTextInputOption = () => {
    Swal.fire({
      title: "Introduceți textul pentru participare",
      input: "text",
      inputPlaceholder: "Introduceți textul generat automat",
      showCancelButton: true,
      confirmButtonText: "Verifică",
      cancelButtonText: "Anulează",
    }).then((result) => {
      if (result.isConfirmed) {
        const inputText = result.value;
        if (inputText === autoGeneratedText) {
          confirmParticipation(id);
          Swal.fire("Succes", "Textul este corect!", "success");
        } else {
          Swal.fire("Eroare", "Textul introdus nu este corect!", "error");
        }
      }
    });
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>{error}</div>;
  }

  if (!event) {
    return <div>Event not found.</div>;
  }

  return (
    <div className="container mx-auto p-6">
      <h1 className="text-2xl font-bold mb-6">{event.name}</h1>
      <p className="text-lg mb-4">{event.description}</p>
      <p className="text-sm text-gray-500">
        Start: {new Date(event.startTime).toLocaleString()}
      </p>
      <p className="text-sm text-gray-500">
        End: {new Date(event.endTime).toLocaleString()}
      </p>
      <p
        className={`mt-2 font-semibold ${
          event.status === "OPEN" ? "text-green-500" : "text-red-500"
        }`}
      >
        Status: {event.status}
      </p>
      {isLoggedIn && isParticipant && (
        <button
          className="mt-4 px-6 py-2 bg-blue-600 text-white rounded-lg"
          onClick={handleJoinEvent}
        >
          Join Event
        </button>
      )}
      {isLoggedIn && !isParticipant && (
        <>
        <button
          className="mt-4 px-6 py-2 bg-blue-600 text-white rounded-lg"
          onClick={handleJoinEvent}
        >
          Participate
        </button>

        {/* <button
        className="mt-4 px-6 py-2 bg-green-600 text-white rounded-lg"
        onClick={handleTextInputOption}
      >
        Participate with Text
      </button> */}

        </>
      )}
      {!isLoggedIn && (
        <button
          className="mt-4 px-6 py-2 bg-gray-500 text-white rounded-lg"
          onClick={() => navigate("/login")}
        >
          Log in to Participate
        </button>
      )}
      {showScanner && (
        <QrCodeScanner
          onScanSuccess={handleScanSuccess}
          onScanError={handleScanError}
        />
      )}
    </div>
  );
}

export default WebEventDetails;
